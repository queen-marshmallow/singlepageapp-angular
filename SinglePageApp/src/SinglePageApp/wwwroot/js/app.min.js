var app=angular.module("app",["ngRoute","ngResource","angularSpinners"]),ngm=function(){var e={};return function(n){var o=e[n];if(o)return o;try{e[n]=angular.module(n)}catch(t){}return e[n]}}();ngm("app").config(["$routeProvider",function(e){e.when("/",{templateUrl:"/views/landing.html",controller:"landingCtrl"}).when("/jobs/create",{templateUrl:"/views/jobs/create-job.html",controller:"createJobCtrl"}).when("/jobs/list",{templateUrl:"/views/jobs/list-job.html",controller:"listJobCtrl"})}]),ngm("app").controller("landingCtrl",["$scope",function(e){e.message="Hello there!"}]),ngm("app").factory("cacheSvc",["$cacheFactory",function(e){return e("app-cache")}]),ngm("app").factory("jobSvc",["$resource","$q",function(e,n){return{getAllJobs:function(){var o=n.defer();return e("api/jobs/").query({},null,function(e){o.resolve(e)},function(e){o.reject(e)}),o.promise},createJob:function(o){var t=n.defer();return e("api/jobs/").save({},o,function(){t.resolve()},function(e){t.reject(e)}),t.promise}}}]),ngm("app").factory("staticDataSvc",["$resource","$q","cacheSvc",function(e,n,o){var t="staticOrganizations_Key",a="staticRoles_Key";return{getOrganizations:function(){var a=n.defer(),i=o.get(t);return null!=i&&a.resolve(i),e("api/organizations/").query({},null,function(e){o.put(t,e),a.resolve(e)},function(e){a.reject(e)}),a.promise},getRoles:function(){var t=n.defer(),i=o.get(a);return null!=i&&t.resolve(i),e("api/roles/").query({},null,function(e){o.put(a,e),t.resolve(e)},function(e){t.reject(e)}),t.promise},getStates:function(){return["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississipi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"]},clearCache:function(){o.remove(t),o.remove(a)}}}]),ngm("app").controller("createJobCtrl",["$scope","$q","jobSvc","staticDataSvc","spinnerService",function(e,n,o,t,a){e.initialize=function(){e.isLoaded=!1,a.show("jobCreateSpinner");var i=t.getOrganizations();i.then(function(n){e.organizations=n});var r=t.getRoles();r.then(function(n){e.roles=n}),n.all([i,r])["finally"](function(){a.hide("jobCreateSpinner"),e.isLoaded=!0}),e.states=t.getStates(),e.submit=function(){var n={Description:e.description,PositionType:e.selectedRole,State:e.selectedState,City:e.city,Location:e.selectedLocation,Organization:e.selectedOrganization};o.createJob(n).then(function(){window.location.replace(window.location.protocol+"//"+window.location.host)})}}}]),ngm("app").controller("listJobCtrl",["$scope","jobSvc","spinnerService",function(e,n,o){e.initialize=function(){o.show("jobListSpinner"),n.getAllJobs().then(function(n){e.jobs=n})["finally"](function(){o.hide("jobListSpinner"),e.isLoaded=!0})}}]);
//# sourceMappingURL=data:application/json;base64,